#include "KDTree.h"

#ifndef CPPONLY
#include "mex.h"

void retrieve_point( const mxArray* matptr, vector<double>& point ){
    // check that I actually received something
    if( matptr == NULL )
        mexErrMsgTxt("vararg{2} must be a [kxN] matrix of data\n");
    
    // retrieve point
    double* data = mxGetPr(matptr);
    if( point.size() != mxGetM(matptr) )
    	mexErrMsgTxt("vararg{2} must be a [kx1] point\n");
    
    for(int dim=0; dim < point.size(); dim++)
		point[dim] = data[dim];
}
void retrieve_tree( const mxArray* matptr, KDTree* & tree){
    // retrieve pointer from the MX form
    double* pointer0 = mxGetPr(matptr);
    // check that I actually received something
    if( pointer0 == NULL )
        mexErrMsgTxt("vararg{1} must be a valid k-D tree pointer\n");
    // convert it to "long" datatype (good for addresses)
    long pointer1 = (long) pointer0[0];
    // convert it to "KDTree"
    tree = (KDTree*) pointer1;
    // check that I actually received something
    if( tree == NULL )
        mexErrMsgTxt("vararg{1} must be a valid k-D tree pointer\n");
    if( tree -> ndim <= 0 )
        mexErrMsgTxt("the k-D tree must have k>0"); 
}
void mexFunction(int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[]){
    // retrieve the tree pointer
    KDTree* tree;
    retrieve_tree( prhs[0], tree ); 
    // retrieve the query point
    vector<double> query(tree->ndim,0);
    retrieve_point( prhs[1], query );
    // retrieve the query cardinality
    // TODO: k =....
    
    // execute the query
    int k = 10;
    vector<int> idxsInRange;
    tree->k_closest_points(query, k, idxsInRange);
        
    // return the indexes
    plhs[0] = mxCreateDoubleMatrix(idxsInRange.size(), 1, mxREAL);
    double* indexes = mxGetPr(plhs[0]);
    for (int i=0; i < idxsInRange.size(); i++)
    	indexes[ i ] = idxsInRange[i] + 1;
}
#endif